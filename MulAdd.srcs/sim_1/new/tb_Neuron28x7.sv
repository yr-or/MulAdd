`timescale 1ns / 1ps

module tb_Neuron28x7();

localparam signed [7:0] W_ARRAY_RAND [0:195] = '{14, -34, 106, 124, -38, -53, 88, 35, 70, 66, 115, -100, 30, 53, 99, -63, 121, 104, 68, -103, 7, -60, -55, -124, -15, -62, 67, -119, -96, 119, 87, 0, -85, -105, 123, 109, 78, -116, 9, -46, 85, -102, -86, -12, 78, 41, 84, 64, 39, -8, 45, 41, 121, -82, 12, 13, -37, 22, 15, -1, 55, 8, -80, 74, 25, -98, -117, -24, -76, -8, -84, -81, -28, -31, -62, -34, -52, -54, -56, -4, 35, -21, 41, -52, -1, 59, 0, -29, 9, 113, 21, -51, -93, -18, 29, -109, -82, -91, -83, -39, 101, 0, 87, 114, -101, 92, -53, 111, -58, 62, 105, 38, -92, -128, -55, 35, -40, 64, -96, 126, -111, -120, 6, 83, 121, -35, 66, 115, -77, 122, -54, 124, -86, -126, 31, -19, -91, -61, -68, 19, 117, -25, 91, 77, 94, -74, 20, 118, 119, -23, -9, -47, -51, -42, -2, -35, -113, -24, 47, 9, -37, -74, 16, 72, -72, -73, 44, -12, -105, 75, 38, 60, 35, 51, -17, 84, 24, -49, -63, 102, 97, 38, 39, 66, -62, 117, 58, -20, -107, 11, -2, 65, 115, -25, 91, -12};
localparam signed [7:0] test_data_rand [0:195] = '{10, -25, 113, -80, 104, 109, 50, -123, -115, 17, -113, 85, 125, -80, 26, -106, 6, 20, 65, 86, -51, 97, 89, 112, -121, -119, 38, 48, -117, -96, -21, 32, 119, -34, 104, -73, 15, 111, 66, 106, 26, -95, -118, -14, 84, -25, -66, -32, -67, -60, 40, -40, 97, -109, -105, -98, 13, -19, 54, -114, -122, -109, -87, 62, 49, -106, 69, 37, 39, 118, -108, -21, 103, 107, -112, -9, -88, 99, -10, -52, -48, -50, -83, 51, 73, 25, 23, -5, 7, 36, 117, -8, -23, 12, -70, -65, 68, 95, -34, 30, 55, -112, 49, 48, 0, -38, -22, -44, 40, 1, -84, 49, -9, -102, 116, 114, -54, 51, 20, -30, -120, 57, 51, -51, -75, -66, 39, 31, -14, 76, 19, -93, -43, 80, -22, 113, -21, -93, -68, -86, 82, 2, -76, 10, -109, 7, -96, -100, -45, 0, -125, -95, -105, 112, -101, -90, -110, 79, 64, 88, 78, 64, -42, 102, 72, -125, -22, -45, 96, 108, 30, -127, -93, 107, -114, 3, -36, 45, 117, 47, 46, 28, 37, -22, -50, 117, 11, 74, -97, -52, -50, -122, 35, 28, 55, -126};

logic signed [7:0] test_data_c [0:195] = '{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 126, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 99, 102, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 125, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 121, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 104, 108, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 126, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 99, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 127, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
logic signed [7:0] W_ARRAY_L2_0 [0:195] = '{ 3, 2, -18, -40, -17, -13, 6, -7, 41, -24, -17, -32, -9, -4, -3, -35, -31, -26, -2, -4, -18, -11, -27, -24, -4, 34, 5, 14, -9, -21, -21, 2, -15, -7, 10, 19, 19, 10, 12, -5, -10, -8, -30, -21, 7, -2, -19, -3, 10, 6, 13, 9, 3, 19, -8, -5, -25, -2, 3, -38, -19, 0, 9, -22, -2, 10, 20, 2, -10, -31, -6, 10, 2, 4, -14, -3, -9, -54, -41, 1, 15, -2, -33, -70, 10, 0, 0, 10, 4, 0, -12, -56, -36, -2, 37, 28, 32, -17, -17, 8, 10, 32, 35, 24, 11, -14, 10, 23, 19, 1, 21, 79, -30, -5, 3, 38, 52, 50, 23, 15, 39, 25, 10, -18, 2, 66, -41, -16, -7, 20, 21, 24, 26, 8, 8, -7, -2, 5, -13, 14, 16, 15, -2, 9, 8, 19, 2, 3, -8, -18, 4, 1, -26, 18, -12, -4, -26, 5, 22, 24, 11, -14, -14, 5, 13, 20, 1, -18, 8, -49, -45, -20, -19, -10, -22, -17, -21, -32, -16, 7, 6, 11, -8, 2, 27, -17, -55, -61, -33, -56, -70, -57, -38, -35, 3, -10 };
logic signed [7:0] B_ARRAY_L2 [0:31] = '{ 9, 31, 9, -25, 2, -12, 16, 16, -4, 12, 2, -2, 23, 0, -14, -6, 23, 4, 20, 5, 6, -21, 16, 14, 7, 32, -9, 35, -8, 5, 13, 25 };

    logic signed [19:0] result_tb;
    reg clk_tb = 1'b0;
    reg reset_tb = 1'b0;
    wire done_tb;

    // Instantiate DUT
    Neuron28x7 #(.BIT_WIDTH(8), .NUM_INP(196)) dut(
        .clk                (clk_tb),
        .reset              (reset_tb),
        .data_in            (test_data_c),
        .weights            (W_ARRAY_L2_0),
        .bias               (B_ARRAY_L2[0]),
        .result             (result_tb),
        .done               (done_tb)
    );

    // Clock generation
    always begin
        #10;
        clk_tb = ~clk_tb;
    end

    initial begin
        // Initial reset
        reset_tb = 1'b1;
        #60;
        reset_tb = 1'b0;
        #600;
    end

endmodule
