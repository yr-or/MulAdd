`timescale 1ns / 1ps

module tb_Neuron14x14();

localparam signed [7:0] W_ARRAY [0:195] = '{196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
localparam signed [7:0] test_data [0:195] = '{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195};

localparam signed [7:0] W_ARRAY_RAND [0:195] = '{14, -34, 106, 124, -38, -53, 88, 35, 70, 66, 115, -100, 30, 53, 99, -63, 121, 104, 68, -103, 7, -60, -55, -124, -15, -62, 67, -119, -96, 119, 87, 0, -85, -105, 123, 109, 78, -116, 9, -46, 85, -102, -86, -12, 78, 41, 84, 64, 39, -8, 45, 41, 121, -82, 12, 13, -37, 22, 15, -1, 55, 8, -80, 74, 25, -98, -117, -24, -76, -8, -84, -81, -28, -31, -62, -34, -52, -54, -56, -4, 35, -21, 41, -52, -1, 59, 0, -29, 9, 113, 21, -51, -93, -18, 29, -109, -82, -91, -83, -39, 101, 0, 87, 114, -101, 92, -53, 111, -58, 62, 105, 38, -92, -128, -55, 35, -40, 64, -96, 126, -111, -120, 6, 83, 121, -35, 66, 115, -77, 122, -54, 124, -86, -126, 31, -19, -91, -61, -68, 19, 117, -25, 91, 77, 94, -74, 20, 118, 119, -23, -9, -47, -51, -42, -2, -35, -113, -24, 47, 9, -37, -74, 16, 72, -72, -73, 44, -12, -105, 75, 38, 60, 35, 51, -17, 84, 24, -49, -63, 102, 97, 38, 39, 66, -62, 117, 58, -20, -107, 11, -2, 65, 115, -25, 91, -12};
localparam signed [7:0] test_data_rand [0:195] = '{10, -25, 113, -80, 104, 109, 50, -123, -115, 17, -113, 85, 125, -80, 26, -106, 6, 20, 65, 86, -51, 97, 89, 112, -121, -119, 38, 48, -117, -96, -21, 32, 119, -34, 104, -73, 15, 111, 66, 106, 26, -95, -118, -14, 84, -25, -66, -32, -67, -60, 40, -40, 97, -109, -105, -98, 13, -19, 54, -114, -122, -109, -87, 62, 49, -106, 69, 37, 39, 118, -108, -21, 103, 107, -112, -9, -88, 99, -10, -52, -48, -50, -83, 51, 73, 25, 23, -5, 7, 36, 117, -8, -23, 12, -70, -65, 68, 95, -34, 30, 55, -112, 49, 48, 0, -38, -22, -44, 40, 1, -84, 49, -9, -102, 116, 114, -54, 51, 20, -30, -120, 57, 51, -51, -75, -66, 39, 31, -14, 76, 19, -93, -43, 80, -22, 113, -21, -93, -68, -86, 82, 2, -76, 10, -109, 7, -96, -100, -45, 0, -125, -95, -105, 112, -101, -90, -110, 79, 64, 88, 78, 64, -42, 102, 72, -125, -22, -45, 96, 108, 30, -127, -93, 107, -114, 3, -36, 45, 117, 47, 46, 28, 37, -22, -50, 117, 11, 74, -97, -52, -50, -122, 35, 28, 55, -126};


    logic signed [7:0] data_in_chunk_tb [0:13][0:13];
    logic signed [7:0] weights_chunk_tb [0:13][0:13];
    logic signed [19:0] result_tb;
    reg clk_tb = 1'b0;
    reg reset_tb = 1'b0;
    wire done_tb;

    // Instantiate DUT
    Neuron14x14 #(.BIT_WIDTH(8), .NUM_INP(196)) dut(
        .clk                (clk_tb),
        .reset              (reset_tb),
        .data_in            (data_in_chunk_tb),
        .weights            (weights_chunk_tb),
        .result             (result_tb),
        .done               (done_tb)
    );

    // Clock generation
    always begin
        #10;
        clk_tb = ~clk_tb;
    end

    initial begin
        // Initial reset
        reset_tb = 1'b1;
        // Input data
        data_in_chunk_tb[0] = test_data_rand[0:13];
        data_in_chunk_tb[1] = test_data_rand[14:27];
        data_in_chunk_tb[2] = test_data_rand[28:41];
        data_in_chunk_tb[3] = test_data_rand[42:55];
        data_in_chunk_tb[4] = test_data_rand[56:69];
        data_in_chunk_tb[5] = test_data_rand[70:83];
        data_in_chunk_tb[6] = test_data_rand[84:97];
        data_in_chunk_tb[7] = test_data_rand[98:111];
        data_in_chunk_tb[8] = test_data_rand[112:125];
        data_in_chunk_tb[9] = test_data_rand[126:139];
        data_in_chunk_tb[10] = test_data_rand[140:153];
        data_in_chunk_tb[11] = test_data_rand[154:167];
        data_in_chunk_tb[12] = test_data_rand[168:181];
        data_in_chunk_tb[13] = test_data_rand[182:195];
        // Weights
        weights_chunk_tb[0] = W_ARRAY_RAND[0:13];
        weights_chunk_tb[1] = W_ARRAY_RAND[14:27];
        weights_chunk_tb[2] = W_ARRAY_RAND[28:41];
        weights_chunk_tb[3] = W_ARRAY_RAND[42:55];
        weights_chunk_tb[4] = W_ARRAY_RAND[56:69];
        weights_chunk_tb[5] = W_ARRAY_RAND[70:83];
        weights_chunk_tb[6] = W_ARRAY_RAND[84:97];
        weights_chunk_tb[7] = W_ARRAY_RAND[98:111];
        weights_chunk_tb[8] = W_ARRAY_RAND[112:125];
        weights_chunk_tb[9] = W_ARRAY_RAND[126:139];
        weights_chunk_tb[10] = W_ARRAY_RAND[140:153];
        weights_chunk_tb[11] = W_ARRAY_RAND[154:167];
        weights_chunk_tb[12] = W_ARRAY_RAND[168:181];
        weights_chunk_tb[13] = W_ARRAY_RAND[182:195];
        #60;
        reset_tb = 1'b0;
        #400;
    end

endmodule
